"use strict";(self.webpackChunkcours=self.webpackChunkcours||[]).push([[2402],{3741:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>t,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"programmation/c","title":"Programmation en C","description":"GCC","source":"@site/docs/programmation/c.md","sourceDirName":"programmation","slug":"/programmation/c","permalink":"/cours/docs/programmation/c","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_label":"Programmation en C","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Programmation","permalink":"/cours/docs/category/programmation"},"next":{"title":"R\xe9seaux","permalink":"/cours/docs/category/r\xe9seaux"}}');var s=r(4848),l=r(8453);const t={sidebar_label:"Programmation en C",sidebar_position:1},a="Programmation en C",c={},o=[{value:"GCC",id:"gcc",level:3},{value:"Les commentaires",id:"les-commentaires",level:3},{value:"Convention de nommage",id:"convention-de-nommage",level:3},{value:"D\xe9claration et affectation de variables",id:"d\xe9claration-et-affectation-de-variables",level:3},{value:"Les diff\xe9rents types de variables",id:"les-diff\xe9rents-types-de-variables",level:3},{value:"Lecture de donn\xe9es clavier",id:"lecture-de-donn\xe9es-clavier",level:3},{value:"Les op\xe9rateurs",id:"les-op\xe9rateurs",level:3},{value:"Les conditions",id:"les-conditions",level:3},{value:"Les boucles",id:"les-boucles",level:3},{value:"Les fonctions",id:"les-fonctions",level:3},{value:"Programmation modulaire",id:"programmation-modulaire",level:3},{value:"Pr\xe9processeur",id:"pr\xe9processeur",level:3},{value:"Pointeurs",id:"pointeurs",level:3},{value:"Tableaux",id:"tableaux",level:3},{value:"Chaines de caract\xe8res",id:"chaines-de-caract\xe8res",level:3},{value:"Structures et types en C",id:"structures-et-types-en-c",level:3},{value:"Allocation dynamique de m\xe9moire",id:"allocation-dynamique-de-m\xe9moire",level:3},{value:"Fichiers",id:"fichiers",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"programmation-en-c",children:"Programmation en C"})}),"\n",(0,s.jsx)(n.h3,{id:"gcc",children:"GCC"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"T\xe9l\xe9charger GCC"}),"\n",(0,s.jsxs)(n.p,{children:["Se rendre sur Winlibs (",(0,s.jsx)(n.a,{href:"https://winlibs.com/",children:"https://winlibs.com/"}),") et installer la derni\xe8re version de GCC - Windows 64 bits - Sans LLVM."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"image.png",src:r(856).A+"",width:"1120",height:"242"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Installer GCC"}),"\n",(0,s.jsx)(n.p,{children:"Lancer l\u2019ex\xe9cutable t\xe9l\xe9charg\xe9 et suivre la proc\xe9dure d\u2019installation."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Ajouter GCC au path Windows"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Chercher \u201cModifier les variables d\u2019environnements du syst\xe8me\u201d"}),"\n",(0,s.jsx)(n.li,{children:"Cliquer \u201cVariables d\u2019environnement \u2026\u201d"}),"\n",(0,s.jsxs)(n.li,{children:["Dans \u201cVariables syst\xe8me\u201d","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["S\xe9lectionner \u201cPath\u201d puis cliquer \u201cModifier\u201d","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Cliquer \u201cNouveau\u201d"}),"\n",(0,s.jsx)(n.li,{children:"Saisir le chemin vers gcc.exe (C:<chemin>\\mingw64\\bin)"}),"\n",(0,s.jsx)(n.li,{children:"Cliquer \u201cOk\u201d"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Fermer toutes les fen\xeatres d\u2019ajouts de variables d\u2019environnement"}),"\n",(0,s.jsx)(n.li,{children:"Fermer tous les invites de commandes"}),"\n",(0,s.jsxs)(n.li,{children:["Ouvrir un invite de commande et v\xe9rifier la pr\xe9sence de gcc avec ",(0,s.jsx)(n.code,{children:"gcc --version"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Si la version de GCC s\u2019affiche, c\u2019est bon."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Commandes de bases de GCC"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Compiler"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"C:\\Users\\John> gcc fichier.c \r\n# Compile fichier.c et cr\xe9e a.exe\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Compiler et choisir le nom du .exe en sortie (",(0,s.jsx)(n.code,{children:"-o"}),")"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"C:\\Users\\John> gcc fichier.c -o fichier.exe \r\n# Compile fichier.c et cr\xe9e fichier.exe\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Une fois le ",(0,s.jsx)(n.code,{children:"fichier.c"})," compil\xe9 en ",(0,s.jsx)(n.code,{children:"fichier.exe"}),", on peut l\u2019ex\xe9cuter depuis l\u2019invite de commande :"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"C:\\Users\\John> fichier.exe\n"})}),"\n",(0,s.jsx)(n.h3,{id:"les-commentaires",children:"Les commentaires"}),"\n",(0,s.jsx)(n.p,{children:"Il existe diff\xe9rentes mani\xe8res de commenter son code en C."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"// Ceci est un commentaire sur une seule ligne\r\n\r\n/*\r\n * Ceci est un commentaire sur plusieurs lignes.\r\n * Style : Classique - ast\xe9risques align\xe9s\r\n */\r\n\r\n/*\r\n    Ceci est un commentaire sur plusieurs lignes.\r\n    Style : Classique - ast\xe9riques non-align\xe9s\r\n*/\r\n\r\n/**\r\n* Ceci est un commentaire sur plusieurs lignes\r\n* Style : Documentation.\r\n**/\r\n\r\n/****************************************************/\r\n/**    Ceci est un commentaire de documentation    **/\r\n/****************************************************/\n"})}),"\n",(0,s.jsx)(n.p,{children:"Raccourci pour commenter :"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Sur CodeBlocks :","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Commenter : ",(0,s.jsx)(n.code,{children:"Ctrl"})," + ",(0,s.jsx)(n.code,{children:"Shift"})," + ",(0,s.jsx)(n.code,{children:"C"})]}),"\n",(0,s.jsxs)(n.li,{children:["D\xe9commenter : ",(0,s.jsx)(n.code,{children:"Ctrl"})," + ",(0,s.jsx)(n.code,{children:"Shift"})," + ",(0,s.jsx)(n.code,{children:"X"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Sur un autre environnement :","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["On peut tester : ",(0,s.jsx)(n.code,{children:"Ctrl"})," + ",(0,s.jsx)(n.code,{children:"Shift"})," + ",(0,s.jsx)(n.code,{children:"/"})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"convention-de-nommage",children:"Convention de nommage"}),"\n",(0,s.jsx)(n.p,{children:"Il existe des conventions de nommage en C, elles d\xe9finissent la nomenclature \xe0 adopter pour les noms de variables et de fonctions."}),"\n",(0,s.jsx)(n.p,{children:"Les deux conventions majeures sont :"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"lowerCamelCase"})})}),"\n",(0,s.jsx)(n.p,{children:"Exemple :"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"unEntier"}),"\n",(0,s.jsx)(n.li,{children:"uneVariableQuiEstUneChaineDeCaractere"}),"\n",(0,s.jsx)(n.li,{children:"maFonction"}),"\n",(0,s.jsx)(n.li,{children:"fonctionSommeDeTroisEntiers"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"snake_case"})})}),"\n",(0,s.jsx)(n.p,{children:"Exemple :"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"un_entier"}),"\n",(0,s.jsx)(n.li,{children:"une_variable_qui_est_une_chaine_de_caractere"}),"\n",(0,s.jsx)(n.li,{children:"ma_fonction"}),"\n",(0,s.jsx)(n.li,{children:"fonction_somme_de_trois_entiers"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Qu'on choisisse ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"lowerCamelCase"})})," ou ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"snake_case"})}),", peu importe, ce qui compte c'est d'utiliser la m\xeame convetion tout au long du programme."]}),"\n",(0,s.jsx)(n.h3,{id:"d\xe9claration-et-affectation-de-variables",children:"D\xe9claration et affectation de variables"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Une variable d\xe9clar\xe9e dans une fonction, n'existe que dans cette fonction."}),"\n",(0,s.jsx)(n.li,{children:"Elle ne peut pas \xeatre r\xe9utilis\xe9 dans une autre fonction ou par le programme principal (main)."}),"\n",(0,s.jsxs)(n.li,{children:["Pour r\xe9cup\xe9rer la valeur d\u2019une variable existant dans une fonction, il faut utiliser le mot cl\xe9 ",(0,s.jsx)(n.code,{children:"return"}),". Attention, une fonction le return effectu\xe9, le programme est sorti de la fonction."]}),"\n",(0,s.jsx)(n.li,{children:"On peut aussi utiliser des variables globales. Ces variables sont accessibles \xe0 toutes les fonctions et au programme principal. Cependant, les variables globales, rendent le code difficile \xe0 maintenir."}),"\n",(0,s.jsxs)(n.li,{children:["Ces mots cl\xe9s ne peuvent pas \xeatre utilis\xe9s comme nom de variables ou de fonctions, ils sont r\xe9serv\xe9s : ",(0,s.jsx)(n.code,{children:"auto - break - case - char - const - default - do - double - else - enum - extern - float - for - goto - if - int - long - register - return - short - signed - sizeof - static - struct - switch - typedef - union - unsigned - void - volatile - while"})]}),"\n",(0,s.jsx)(n.li,{children:"Les pointeurs sont la solution. Les pointeurs permettent \xe0 une fonction de modifier la valeur d\u2019une variable, puis on peut la r\xe9cup\xe9rer depuis une autre fonction ou le programme principal sans avoir besoin d\u2019utiliser un return. Le pointeur nous permet de modifier la valeur de la variable, on ne travaille pas sur une copie de la variable. Les pointeurs doivent \xeatre mani\xe9e avec pr\xe9caution."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"D\xe9claration de variable :"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"TYPE nomDeVariable;\n"})}),"\n",(0,s.jsx)(n.p,{children:"Affectation de valeur \xe0 une variable :"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"nomDeVariable = VALEUR;\n"})}),"\n",(0,s.jsx)(n.p,{children:"Exemple :"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'// D\xe9claration de ma variable "monEntier" qui est de type entier.\r\nint monEntier;\r\nprintf("monEntier vaut : %d \\n", monEntier);\r\n// La valeur affich\xe9e ici est impr\xe9visible, parfois 0, parfois al\xe9atoire !\r\n// C\'est pour cela qu\'il faut affecter une valeur \xe0 une variable.\r\n\r\n// Affectation de ma variable "monEntier" qui vaut 13.\r\nmonEntier = 13;\r\nprintf("monEntier vaut : %d \\n", monEntier);\r\n\r\n// D\xe9claration et affectation de ma variable "monAutreEntier" qui est de type entier et qui vaut 12.\r\nint monAutreEntier = 12;\r\nprintf("monAutreEntier vaut : %d \\n", monAutreEntier);\n'})}),"\n",(0,s.jsx)(n.h3,{id:"les-diff\xe9rents-types-de-variables",children:"Les diff\xe9rents types de variables"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Types de base"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"int age = 25;                 // Entier\r\nfloat pi = 3.14;              // Nombre \xe0 virgule flottante\r\ndouble largePi = 3.141592653; // Nombre \xe0 virgule flottante double pr\xe9cision\r\nchar grade = 'A';             // Caract\xe8re\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Types avanc\xe9s"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'int array[5] = {1, 2, 3, 4, 5};         // Tableau d\'entiers\r\nchar name[] = "Alice";                  // Tableau de caract\xe8res (cha\xeene)\r\nint *ptr = &age;                        // Pointeur vers un entier\r\nfloat matrix[2][2] = {{1.0, 2.0}, {3.0, 4.0}}; // Matrice 2x2 de nb \xe0 virgule\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Types sp\xe9cifiques"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"unsigned int count = 10;      // Entier non sign\xe9\r\nlong population = 7800000000; // Entier long\r\nshort smallNum = 32000;       // Entier court\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Structures"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"struct Point {\r\n    int x;\r\n    int y;\r\n};\r\nstruct Point p1 = {10, 20};   // Initialisation d'une structure\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"\xc9num\xe9rations"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"enum Color { RED, GREEN, BLUE };\r\nenum Color favoriteColor = GREEN; // Variable d'une \xe9num\xe9ration\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Booleans (en C99 ou versions sup\xe9rieures)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"// En C99 ou versions sup\xe9rieures\r\n#include <stdbool.h>\r\nbool isRunning = true;        // Variable bool\xe9enne\r\n\r\n// Sinon \r\nint isRunning = 1             // Variable pseudo-bool\xe9enne (1 ou 0)\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Signed vs unsigned"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Sign\xe9 : peut contenir des valeurs positives et n\xe9gatives"}),"\n",(0,s.jsx)(n.li,{children:"Non-sign\xe9 : ne contient que des valeurs positives, mais avec une plage plus large"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["En C, les nombres sont sign\xe9s par d\xe9faut. Cela signifie que les types num\xe9riques comme ",(0,s.jsx)(n.code,{children:"int"}),", ",(0,s.jsx)(n.code,{children:"short"}),", ",(0,s.jsx)(n.code,{children:"long"}),", et ",(0,s.jsx)(n.code,{children:"char"})," sont interpr\xe9t\xe9s comme sign\xe9s \xe0 moins qu'ils soient explicitement d\xe9clar\xe9s comme non sign\xe9s avec le mot-cl\xe9 ",(0,s.jsx)(n.code,{children:"unsigned"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Exemple :"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"int x;"})," \u2192 Sign\xe9 (peut contenir des valeurs positives et n\xe9gatives)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"unsigned int x;"})," \u2192 Non sign\xe9 (ne contient que des valeurs positives, mais avec une plage plus large)."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Exception :"}),"\n",(0,s.jsxs)(n.p,{children:["Pour le type ",(0,s.jsx)(n.code,{children:"char"}),", la signedness par d\xe9faut d\xe9pend de l'impl\xe9mentation du compilateur. Certains compilateurs le consid\xe8rent comme sign\xe9, tandis que d'autres comme non sign\xe9. Pour \xe9viter l'ambigu\xeft\xe9, il est pr\xe9f\xe9rable d'utiliser explicitement ",(0,s.jsx)(n.code,{children:"signed char"})," ou ",(0,s.jsx)(n.code,{children:"unsigned char"}),"."]}),"\n",(0,s.jsxs)("aside",{children:[(0,s.jsx)(n.p,{children:"\u2139\ufe0f"}),(0,s.jsxs)(n.p,{children:["Dans un premier temps, on peut ignorer la notion de ",(0,s.jsx)(n.code,{children:"signed"})," ou ",(0,s.jsx)(n.code,{children:"unsigned"}),"."]})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Les formats sp\xe9cificateurs / jokers / drapeau"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Entier : ",(0,s.jsx)(n.code,{children:"int"})," : ",(0,s.jsx)(n.code,{children:"%d"})]}),"\n",(0,s.jsxs)(n.li,{children:["Nombre d\xe9cimal : ",(0,s.jsx)(n.code,{children:"float"})," : ",(0,s.jsx)(n.code,{children:"%f"})]}),"\n",(0,s.jsxs)(n.li,{children:["Caract\xe8re : ",(0,s.jsx)(n.code,{children:"char"})," : ",(0,s.jsx)(n.code,{children:"%c"})]}),"\n",(0,s.jsxs)(n.li,{children:["Chaine de caract\xe8re : ",(0,s.jsx)(n.code,{children:"char var[]"})," : ",(0,s.jsx)(n.code,{children:"%s"})]}),"\n",(0,s.jsxs)(n.li,{children:["Adresse m\xe9moire (pointeur) : ",(0,s.jsx)(n.code,{children:"int *ptr"})," : ",(0,s.jsx)(n.code,{children:"%p"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["On se sert des formats sp\xe9cificateurs lors d\u2019un affichage via ",(0,s.jsx)(n.code,{children:"printf()"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Compl\xe9ments"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Les variables doivent toutes \xeatre d\xe9clar\xe9es au d\xe9but de la fonctionne ou du main. Pas en cours de programme."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Il existe la subtilit\xe9 des types ",(0,s.jsx)(n.code,{children:"signed"})," vs ",(0,s.jsx)(n.code,{children:"unsigned"})," mais on ne s'en occupera pas ici par soucis de simplicit\xe9."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Il existe les types ",(0,s.jsx)(n.code,{children:"short"}),", ",(0,s.jsx)(n.code,{children:"long"}),", ",(0,s.jsx)(n.code,{children:"double"}),", ",(0,s.jsx)(n.code,{children:"long double"})," qui reprennent les types pr\xe9sent\xe9s plus haut, avec plus ou moins d'espace m\xe9moire, et plus ou moins d'octets affect\xe9s par variable selon le type."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:'On peut utiliser des variables dites "globales" mais c\'est \xe0 d\xe9conseiller.'}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Une telle variable est d\xe9clar\xe9 au d\xe9but du programme, en dehors de toute fonction. Mais est accessible par toutes les fonctions."}),"\n",(0,s.jsx)(n.li,{children:"C'est \xe0 \xe9viter pour des raisons de performances et de complexit\xe9 dans le code."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["L'utilisation d'une variable globale ",(0,s.jsx)(n.code,{children:"static"})," force le compilateur \xe0 rendre cette variable accessible uniquement aux fonctions du fichier dans laquelle elle est d\xe9finie."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Il est possible que par d\xe9faut toutes les variables soit consid\xe9r\xe9es comme statiques par le compilateur."}),"\n",(0,s.jsxs)(n.li,{children:["Une variable globale (d\xe9clar\xe9e sans ",(0,s.jsx)(n.code,{children:"static"}),") est accessible \xe0 tous les fichiers ",(0,s.jsx)(n.code,{children:".c"})," du programme, \xe0 condition d'utiliser le mot-cl\xe9 ",(0,s.jsx)(n.code,{children:"extern"})," dans les autres fichiers pour y acc\xe9der."]}),"\n",(0,s.jsxs)(n.li,{children:["Une variable globale ",(0,s.jsx)(n.code,{children:"static"})," est accessible uniquement dans le fichier ",(0,s.jsx)(n.code,{children:".c"})," o\xf9 elle est d\xe9finie. Elle n'est pas visible dans les autres fichiers, m\xeame avec ",(0,s.jsx)(n.code,{children:"extern"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"Exemple :"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'// Fichier1.c\r\n#include <stdio.h>\r\n#include "fichier1.h"\r\n\r\nint counter = 0;  // Visible par tous les fichiers .c \r\n// static int counter = 0; // Visible uniquement par fichier1.c \r\n\r\nvoid increment() {\r\n    counter++;\r\n}\r\n\r\n// Fichier1.h\r\n#ifndef FICHIER1_H\r\n#define FICHIER1_H\r\n\r\nvoid increment();  // D\xe9claration de la fonction\r\n\r\n#endif\r\n\r\n// main.c\r\n#include <stdio.h>\r\n#include "fichier1.h"\r\n\r\nextern int counter; // On r\xe9cup\xe8re la variable externe\r\n\r\nint main()\r\n{\r\n    printf("%d \\n",counter);\r\n    increment(); // On acc\xe8de \xe0 la fonction de fichier1.c\r\n    printf("%d",counter);\r\n\r\n    return 0;\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"R\xe9sultat :"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"0\r\n1\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["En revanche, l'utilisation du mot cl\xe9 ",(0,s.jsx)(n.code,{children:"static"})," lors de la d\xe9claration d'une variable locale dans une fonction, permet de ne pas d\xe9truire cette variable lors de la fin de l'ex\xe9cution de la fonction. Cela permet donc de conserver la valeur d'une variable local."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Sans le mot cl\xe9 ",(0,s.jsx)(n.code,{children:"static"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\r\n\r\nvoid fonction(){\r\n    int nb_fois_appel = 0;\r\n    nb_fois_appel++;\r\n    printf("%d \\n", nb_fois_appel);\r\n}\r\n\r\nint main()\r\n{\r\n    fonction();\r\n    fonction();\r\n    fonction();\r\n    return 0;\r\n}\r\n\r\n// R\xe9sultat\r\n1\r\n1\r\n1\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Avec le mot cl\xe9 ",(0,s.jsx)(n.code,{children:"static"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\r\n\r\nvoid fonction(){\r\n    static int nb_fois_appel = 0;\r\n    nb_fois_appel++;\r\n    printf("%d \\n", nb_fois_appel);\r\n}\r\n\r\nint main()\r\n{\r\n    fonction();\r\n    fonction();\r\n    fonction();\r\n    return 0;\r\n}\r\n\r\n// R\xe9sultat\r\n1\r\n2\r\n3\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Le mot cl\xe9 ",(0,s.jsx)(n.code,{children:"const"})," permet de consid\xe9rer une variable comme immuable. Une fois initialiser, on ne pourra pas la modifier."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"const int x = 10;\r\nx = 20; // Erreur : x est constant.\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Exemple de d\xe9clarations et affectations de variables. Plus affichage."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'void lesDifferentsTypesDeVariables()\r\n{\r\n    int unEntier = 12 ;\r\n    float unNombreDecimal = 15.1234 ;\r\n    char unCaractere = \'A\' ;\r\n    char unAutreCaractere = 65 ;\r\n    char uneChaineDeCaracteres[] = "ABCDEF" ;\r\n    const float PI = 3.14 ;\r\n\r\n    printf("unEntier vaut : %d \\n", unEntier);\r\n    printf("unNombreDecimal vaut : %f \\n", unNombreDecimal);\r\n    printf("unNombreDecimal arrondi a deux chiffres apres la virgule vaut : %.2f \\n", unNombreDecimal);\r\n    printf("unNombreDecimal converti en entier vaut : %d \\n", (int)unNombreDecimal);\r\n    printf("unCaractere vaut : %c \\n", unCaractere);\r\n    printf("unAutreCaractere vaut : %c \\n", unAutreCaractere);\r\n    printf("uneChaineDeCaractereVaut : %s \\n", uneChaineDeCaracteres);\r\n    printf("La variable constante PI est immuable et vaut : %f \\n", PI);\r\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"lecture-de-donn\xe9es-clavier",children:"Lecture de donn\xe9es clavier"}),"\n",(0,s.jsxs)(n.p,{children:["La saisie clavier se fait \xe0 l'aide du mot cl\xe9 ",(0,s.jsx)(n.code,{children:"scanf"}),", d'un format sp\xe9cificateur ",(0,s.jsx)(n.code,{children:"%X"}),", et de l'adresse de la variable (pas de sa valeur !)."]}),"\n",(0,s.jsxs)(n.p,{children:["Pour faire r\xe9f\xe9rence \xe0 l\u2019adresse d\u2019une variable et pas sa valeur, on utilise le caract\xe8re ",(0,s.jsx)(n.code,{children:"&"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'scanf("%d",&maVariable); // R\xe9cup\xe9ration d\'un entier et affectation de cette valeur \xe0 la variable maVariable. \n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'void lectureDeDonneesClavier(){\r\n    int maVariable = 0;\r\n    printf("Saisir un nombre entier : ");\r\n\r\n    scanf("%d",&maVariable);\r\n\r\n    printf("maVariable vaut : %d \\n", maVariable);\r\n}\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"maVariable"})," : fait r\xe9f\xe9rence \xe0 valeur de la variable (dans un premier temps : 0)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"&maVariable"})," : fait r\xe9f\xe9rence \xe0 l'adresse o\xf9 est stock\xe9e la variable."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Avec la saisie clavier, on d\xe9cide donc d'affecter \xe0 l'adresse de la variable ",(0,s.jsx)(n.code,{children:"maVariable"}),", la valeur saisie par l'utilisateur, un entier, via le format sp\xe9cificateur ",(0,s.jsx)(n.code,{children:"%d"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"les-op\xe9rateurs",children:"Les op\xe9rateurs"}),"\n",(0,s.jsx)(n.p,{children:"Voici les op\xe9rateurs disponibles en C :"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"+"})," : addition"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"-"})," : soustraction"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"*"})," : multiplication"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"/"})," : division (r\xe9sultat entier) : 5 / 2 = 2"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"%"})," : modulo (reste d\u2019une division) : 5 % 2 = 1"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"="})," : affectation"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"+= X"})," : incr\xe9mentation de X"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"-= X"})," : d\xe9cr\xe9mentation de X"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"++"})," : incr\xe9mentation de 1"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"--"})," : d\xe9cr\xe9mentation de 1"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'void lesOperateurs(){\r\n\r\n    int maVariable = 0; // maVariable vaut 0\r\n\r\n    printf("maVariable vaut : %d \\n", maVariable);\r\n    printf("maVariable + 5 vaut : %d \\n", maVariable + 5); // maVariable vaut 0\r\n\r\n    maVariable = maVariable + 10; // maVariable vaut 10\r\n    printf("J\'ajoute 10 et maVariable vaut maintenant : %d \\n", maVariable); \r\n\r\n    maVariable += 7 ; // maVariable vaut 17\r\n    printf("J\'ajoute 7 et maVariable vaut desormais : %d \\n", maVariable);\r\n\r\n    maVariable ++; // maVariable vaut 18\r\n    printf("J\'incremente de 1 et maVariable vaut finalement : %d \\n", maVariable);\r\n\r\n    maVariable --; // maVariable vaut 17\r\n    printf("Je decremente de 1 et maVariable vaut finalement : %d \\n", maVariable);\r\n}\r\n\r\n// ----- D\xe9but Affichage console ----- //\r\nmaVariable vaut : 0 \r\nmaVariable + 5 vaut : 5 \r\nJ\'ajoute 10 et maVariable vaut maintenant : 10 \r\nJ\'ajoute 7 et maVariable vaut desormais : 17 \r\nJ\'incremente de 1 et maVariable vaut finalement : 18 \r\nJe decremente de 1 et maVariable vaut finalement : 17\r\n// ----- Fin Affichage console ----- //\n'})}),"\n",(0,s.jsx)(n.h3,{id:"les-conditions",children:"Les conditions"}),"\n",(0,s.jsx)(n.p,{children:"Il existe deux types de conditions :"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"if - else if - else"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"switch - case"})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Il existe plusieurs comparateurs :"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"=="})," : \xe9gal \xe0"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"!="})," : diff\xe9rent de"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:">"})," : sup\xe9rieur \xe0"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"<"})," : inf\xe9rieur \xe0"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:">="})," : sup\xe9rieur ou \xe9gal \xe0"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"<="})," : inf\xe9rieur ou \xe9gal \xe0"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"&&"})," : ET"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"||"})," : OU"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"!"})," : NON"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Le IF - ELSE IF - ELSE"})}),"\n",(0,s.jsxs)("aside",{children:[(0,s.jsx)(n.p,{children:"\u26a0\ufe0f"}),(0,s.jsx)(n.p,{children:"Si l'instruction dans le if ne fait qu'une ligne, on peut omettre les accolades mais c'est fortement d\xe9conseill\xe9."})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'void lesConditionsIfElseIfElse(){\r\n    int maVariable = 20;\r\n\r\n    if(maVariable == 0)\r\n    {\r\n        printf("maVarible vaut 0 \\n");\r\n    }\r\n    else if(1 <= maVariable && maVariable <= 10)\r\n    {\r\n        printf("maVarible est comprise entre 1 et 10 \\n");\r\n    }\r\n    else if(10 < maVariable && maVariable < 20)\r\n    {\r\n        printf("maVarible est comprise entre 11 et 19 \\n");\r\n    }else\r\n    {\r\n            printf("maVariable vaut au moins 20 \\n");\r\n    }\r\n    \r\n    int monNombre = 15;\r\n    int boolean = -1; // Un "bool\xe9en" qu\'on initialise \xe0 -1. 0:false 1:true\r\n\r\n    // On teste si monNombre vaut 15. Si c\'est vrai on retourne 1, si c\'est faux on retourne 0. boolean prend la valeur retournee.\r\n    // On utilise un op\xe9rateur ternaire pour r\xe9aliser cette op\xe9ration. Non recommand\xe9 !\r\n    boolean = (monNombre == 15) ? 1 : 0; \r\n    \r\n    // Equivalent \xe0 \r\n    if(monNombre == 15){\r\n            boolean = 1;\r\n    }else{\r\n            boolean = 0;\r\n    }\r\n\r\n    // On teste si boolean est vrai (==1). Si c\'est vrai on affiche un certain message, si c\'est faux on en affiche un autre.\r\n    // Op\xe9rateur ternaire. Non recommand\xe9.\r\n    (boolean == 1) ? printf("monNombre vaut bien 15 \\n") : printf("monNombre ne vaut pas 15 \\n");\r\n    \r\n    // if. Recommand\xe9.\r\n    if (boolean == 1){\r\n                printf("monNombre vaut bien 15 \\n");\r\n        }else{\r\n                printf("monNombre ne vaut pas 15 \\n");\r\n        }\r\n}\r\n\r\n// ----- D\xe9but Affichage console ----- //\r\nmaVariable vaut au moins 20 \r\nmonNombre vaut bien 15 \r\nmonNombre vaut bien 15\r\n// ----- Fin Affichage console ----- //\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Le SWITCH - CASE"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Particuli\xe8rement utile pour les menus."}),"\n",(0,s.jsxs)(n.li,{children:["Dans les ",(0,s.jsx)(n.code,{children:"case"}),", on ne peut tester que des valeurs enti\xe8res."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"break"})," permet de sortir du switch une fois la condition r\xe9alis\xe9e."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"default"})," regroupe l\u2019ensemble des autres cas possibles. Equivalent du ",(0,s.jsx)(n.code,{children:"else"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'void lesConditionsSwitchCase(){\r\n    int autreVariable = 5 ;\r\n\r\n    switch(autreVariable)\r\n    {\r\n        case 0:\r\n            printf("autreVariable vaut 0 \\n");\r\n            break;\r\n        case 1:\r\n            printf("autreVariable vaut 1 \\n");\r\n            break;\r\n        case 2:\r\n            printf("autreVariable vaut 2 \\n");\r\n            break;\r\n        default :\r\n            printf("autreVariable ne vaut pas 0, 1 ou 2 \\n");\r\n            break;\r\n    }\r\n}\r\n\r\n// ----- D\xe9but Affichage console ----- //\r\nautreVariable ne vaut pas 0, 1 ou 2\r\n// ----- Fin Affichage console ----- //\n'})}),"\n",(0,s.jsx)(n.h3,{id:"les-boucles",children:"Les boucles"}),"\n",(0,s.jsx)(n.p,{children:"Les boucles permettent de r\xe9p\xe9ter une instruction un certain nombre de fois."}),"\n",(0,s.jsx)(n.p,{children:"Il existe deux types de boucles :"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"while"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"do - while"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"for"})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Boucle WHILE"})}),"\n",(0,s.jsxs)(n.p,{children:["La boucle ",(0,s.jsx)(n.code,{children:"while"})," v\xe9rifie la condition puis s'ex\xe9cute si la condition est v\xe9rifi\xe9e."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Syntaxe g\xe9n\xe9rique"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"while(condition){\r\n        instruction;\r\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Exemple :"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'void lesBouclesWhile(){\r\n    int i = 0;\r\n    while( i < 5 )\r\n    {\r\n        printf("%d. Bonjour tout le monde :) \\n",i);\r\n        i++;\r\n    }\r\n    printf("\\n");\r\n}\r\n\r\n// ----- D\xe9but Affichage console ----- //\r\n0. Bonjour tout le monde :)\r\n1. Bonjour tout le monde :)\r\n2. Bonjour tout le monde :)\r\n3. Bonjour tout le monde :)\r\n4. Bonjour tout le monde :)\r\n// ----- Fin Affichage console ----- //\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Boucle DO-WHILE"})}),"\n",(0,s.jsx)(n.p,{children:"La boucle do-while s'ex\xe9cute au moins une fois avant de v\xe9rifier la condition puis de boucler si celle-ci est v\xe9rifi\xe9e."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Syntaxe g\xe9n\xe9rique :"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"do{\r\n        instruction;\r\nwhile(condition);\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Exemple :"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'void lesBouclesDoWhile(){\r\n        /*do{\r\n            instruction;\r\n      }while(condition);\r\n    */\r\n    int cpt = 10;\r\n    \r\n    do{\r\n        printf("%d. Bonsoir tout le monde :) \\n",cpt);\r\n        cpt++;\r\n    }while( cpt < 5);\r\n    \r\n    printf("\\n");\r\n}\r\n\r\n// ----- D\xe9but Affichage console ----- //\r\n10. Bousoir tout le monde :)\r\n// ----- Fin Affichage console ----- //\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Boucle FOR"})}),"\n",(0,s.jsx)(n.p,{children:"La boucle for s'ex\xe9cute un nombre de fois pr\xe9d\xe9termin\xe9 \xe0 l'avance. On pr\xe9cise un d\xe9but, une fin (exclue) et le pas."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Syntaxe g\xe9n\xe9rique :"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"for(debut ; fin ; pas){\r\n        instruction;\r\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Exemple :"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'void lesBouclesFor(){\r\n    for(int j=0 ; j < 5 ; j = j+2)\r\n    {\r\n        printf("%d. Salut tout le monde :) \\n", j);\r\n    }\r\n}\r\n\r\n// ----- D\xe9but Affichage console ----- //\r\n0. Salut tout le monde :)\r\n2. Salut tout le monde :)\r\n4. Salut tout le monde :)\r\n// ----- Fin Affichage console ----- //\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"les-fonctions",children:"Les fonctions"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Une fonction permet de factoriser du code."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Exemples de fonctions :"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"printf()"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"scanf()"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Formalisme d\u2019une fonction :"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"<type_de_retour> <nom_de_la_fonction>(<parametres_entrees>)\r\n{\r\n        instruction;\r\n        //return variable_de_type_type_de_retour\r\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Si une fonction ne retourne rien, on peut indiquer ",(0,s.jsx)(n.code,{children:"void"})," dans l'emplacement ",(0,s.jsx)(n.code,{children:"<type_de_retour>"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Une variable d\xe9clar\xe9e dans une fonction n'existe que dans cette fonction. On appelle cela des variables locales et elles sont d\xe9truites lors que la fonction \xe0 fini de s'ex\xe9cuter."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["L'utilisation du mot cl\xe9 ",(0,s.jsx)(n.code,{children:"static"})," devant la d\xe9claration d'une fonction force cette fonction \xe0 n'\xeatre accessible que depuis le fichier dans laquelle elle est d\xe9finie."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["L'utilisation du mot cl\xe9 ",(0,s.jsx)(n.code,{children:"static"})," devant la d\xe9claration d'une variable dans une fonction permet \xe0 cette variable de ne pas \xeatre d\xe9truite \xe0 la fin de l\u2019ex\xe9cution de la fonction."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Les fonctions ne peuvent pas \xeatre imbriqu\xe9es en C."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Le prototype d\u2019une fonction (aussi appel\xe9e signature) est l\u2019ent\xeate d\u2019une fonction :"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Syntaxe : ",(0,s.jsx)(n.code,{children:"<type_de_retour> <nom_de_la_fonction>(<parametres_entrees>);"})]}),"\n",(0,s.jsxs)(n.li,{children:["Exemple : ",(0,s.jsx)(n.code,{children:"float aire_cercle(int rayon);"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Si une m\xe9thode est d\xe9finie apr\xe8s le ",(0,s.jsx)(n.code,{children:"main"}),", celle-ci ne sera pas utilisable dans le ",(0,s.jsx)(n.code,{children:"main"}),". Il faut alors, soit :"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["D\xe9clarer la fonction avant le ",(0,s.jsx)(n.code,{children:"main"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["D\xe9clarer le prototype de la fonction avant le ",(0,s.jsx)(n.code,{children:"main"}),", et laisser la fonction apr\xe8s le ",(0,s.jsx)(n.code,{children:"main"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"void maFonction(); // Prototype\r\n\r\nint main() {\r\n    maFonction(); // Appel valide\r\n}\r\n\r\nvoid maFonction() {\r\n    // D\xe9finition\r\n}\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Exemple :"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'float aire_cercle(int rayon){\r\n    const float PI = 3.14;\r\n    float aire = PI * pow(rayon,2); // Besoin de la bibliot\xe8que "math" pour utiliser la fonction "pow" ("#include <math.h>" en haut du programme)\r\n    return aire;\r\n}\r\n\r\nint bonjour()\r\n{\r\n    printf("Bonjour ! \\n");\r\n    return 1;\r\n}\r\n\r\nint retourFonctionBonjour = bonjour(); // On r\xe9cup\xe8re la valeur retourne mais on affiche aussi le message "Bonjour !").\r\nprintf("La fonction bonjour() retourne : %d \\n", retourFonctionBonjour);\r\n\r\nint rayon = 5;\r\nprintf("Un cercle d\'une aire de %d vaut : %.2f \\n", rayon, aire_cercle(rayon));\r\n\r\n// ----- D\xe9but Affichage console ----- //\r\nBonjour ! \r\nLa fonction bonjour() retourne : 1 \r\nUn cercle d\'une aire de 5 vaut : 78.50 \r\n// ----- Fin Affichage console ----- //\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"programmation-modulaire",children:"Programmation modulaire"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"La modularit\xe9 c'est utiliser des biblioth\xe8ques externes. C\u2019est augmenter les possibilit\xe9s."}),"\n",(0,s.jsxs)(n.li,{children:["Les fichiers en ",(0,s.jsx)(n.code,{children:".h"})," ce sont les fichiers de descriptions (prototypes des fonctions)."]}),"\n",(0,s.jsxs)(n.li,{children:["Les fichiers en ",(0,s.jsx)(n.code,{children:".c"})," contiennent le contenu du code."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Exemple"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Fichier d'en-t\xeate : ",(0,s.jsx)(n.code,{children:"math_utils.h"})]}),"\n",(0,s.jsx)(n.p,{children:"Ce fichier contient les prototypes des fonctions."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"#ifndef MATH_UTILS_H\r\n#define MATH_UTILS_H\r\n\r\n// Prototype d'une fonction pour additionner deux nombres\r\nint addition(int a, int b);\r\n\r\n// Prototype d'une fonction pour soustraire deux nombres\r\nint soustraction(int a, int b);\r\n\r\n#endif\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Fichier d'impl\xe9mentation : ",(0,s.jsx)(n.code,{children:"math_utils.c"})]}),"\n",(0,s.jsxs)(n.p,{children:["Ce fichier contient les d\xe9finitions des fonctions d\xe9clar\xe9es dans le ",(0,s.jsx)(n.code,{children:".h"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'#include "math_utils.h"\r\n\r\n// D\xe9finition de l\'addition\r\nint addition(int a, int b) {\r\n    return a + b;\r\n}\r\n\r\n// D\xe9finition de la soustraction\r\nint soustraction(int a, int b) {\r\n    return a - b;\r\n}\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Programme principal : ",(0,s.jsx)(n.code,{children:"main.c"})]}),"\n",(0,s.jsx)(n.p,{children:"Ce fichier utilise le module d\xe9fini dans les deux fichiers pr\xe9c\xe9dents."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\r\n#include "math_utils.h"\r\n\r\nint main() {\r\n    int x = 10, y = 5;\r\n\r\n    printf("Addition : %d + %d = %d\\n", x, y, addition(x, y));\r\n    printf("Soustraction : %d - %d = %d\\n", x, y, soustraction(x, y));\r\n\r\n    return 0;\r\n}\r\n\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Compilation et ex\xe9cution"}),"\n",(0,s.jsx)(n.p,{children:"Compilez les fichiers ensemble pour cr\xe9er un ex\xe9cutable :"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"gcc main.c math_utils.c -o main // Cr\xe9ation de l'ex\xe9cutable\r\n./main                          // Ex\xe9cution de l\"ex\xe9cutable\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"La syntaxe d\u2019un fichier .h est sp\xe9cifique, on y retrouve des gardes d'inclusion (include guards)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Leur objectif est d\u2019\xe9viter les inclusions multiples d'un fichier d'en-t\xeate dans un m\xeame fichier source."}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"#ifndef MATH_UTILS_H"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Signifie : ",(0,s.jsxs)(n.em,{children:['"Si ',(0,s.jsx)(n.code,{children:"MATH_UTILS_H"})," n'est pas d\xe9fini...\""]})]}),"\n",(0,s.jsxs)(n.li,{children:["Cette ligne v\xe9rifie si une macro appel\xe9e ",(0,s.jsx)(n.code,{children:"MATH_UTILS_H"})," existe d\xe9j\xe0. Si ce n'est pas le cas, cela indique que le fichier d'en-t\xeate n'a pas encore \xe9t\xe9 inclus."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"#define MATH_UTILS_H"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["D\xe9finit la macro ",(0,s.jsx)(n.code,{children:"MATH_UTILS_H"})," pour indiquer que ce fichier est en cours d'inclusion."]}),"\n",(0,s.jsxs)(n.li,{children:["Une fois ce fichier d'en-t\xeate inclus, la macro ",(0,s.jsx)(n.code,{children:"MATH_UTILS_H"})," est d\xe9finie."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Code principal (contenu entre les gardes)"}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"#endif"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Terminer le bloc conditionnel ouvert par ",(0,s.jsx)(n.code,{children:"#ifndef"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"Cela marque la fin des gardes d'inclusion."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["A noter que tout fonctionne sans les ",(0,s.jsx)(n.code,{children:"#include"})," sur CodeBlocks, c'est une facilit\xe9 permise par cet IDE, ce ne serait pas forc\xe9ment le cas sans IDE, avec un \xe9diteur de texte + un compilateur."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Pour comprendre la programmation modulaire, on peut tester dans ces fichiers le fonctionnement de variables locales et globales statiques ainsi que de fonctions statiques."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"pr\xe9processeur",children:"Pr\xe9processeur"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Le pr\xe9processeur est un sous programme qui s'ex\xe9cute avant la compilation."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Il op\xe8re des changements en suivant des directives qu'on lui indique."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["A travers les mots cl\xe9s ",(0,s.jsx)(n.code,{children:"include"})," ou ",(0,s.jsx)(n.code,{children:"define"}),", on peut indiquer une certaine configuration."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Ces mots cl\xe9s sont appel\xe9s des directives de pr\xe9processeur."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"#include"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Ce mot cl\xe9 permet de faire r\xe9f\xe9rence \xe0 des biblioth\xe8ques, d'inclure un fichier.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Si cette biblioth\xe8que est pr\xe9existante, on l\u2019appelle en utilisant des ",(0,s.jsx)(n.code,{children:"< >"}),".","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Ex : ",(0,s.jsx)(n.code,{children:"#include <stdio.h>"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Si cette biblioth\xe8que est externe (d\xe9velopp\xe9e), on l\u2019appelle en utilisant des ",(0,s.jsx)(n.code,{children:'" "'}),".","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Ex : ",(0,s.jsx)(n.code,{children:'#include "ma_biblio.h"'})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"#define"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Ce mot cl\xe9 permet d'indiquer au pr\xe9processeur certains besoins de remplacements. Ces remplacements ont lieu avant la compilation.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["On peut cr\xe9er des constantes.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Ex : ",(0,s.jsx)(n.code,{children:"#define __LONGUEUR__ 15"})," : Permet de modifier toutes les occurrences de ",(0,s.jsx)(n.code,{children:"__LONGUEUR__"})," par 15."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["On peut remplacer des fonctions.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Ex : ",(0,s.jsx)(n.code,{children:"#define afficher printf"})," : Permet de remplacer toutes les occurrences de ",(0,s.jsx)(n.code,{children:"afficher"})," par ",(0,s.jsx)(n.code,{children:"printf"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["On peut remplacer des instructions.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Ex : ",(0,s.jsx)(n.code,{children:'#define Coucou printf("Coucou tout le monde\\n")'})," : Permet de remplacer toutes les occurrences de ",(0,s.jsx)(n.code,{children:"Coucou"})," par ",(0,s.jsx)(n.code,{children:'printf("Coucou tout le monde \\n")'}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"On peut faire des calculs directement dans les #define. Attention cependant aux types des diff\xe9rentes constantes utilis\xe9s. (voir exemple avec les taxes)."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Il existe des constantes pr\xe9d\xe9finis du langage C :","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"__FILE__"})," : nom du fichier"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"__LINE__"})," : ligne du fichier"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"__DATE__"})," : date de compilation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"__TIME__"})," : heure de compilation"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Ce mot cl\xe9 permet aussi d'\xe9viter les boucles d'inclusion, au sein des fichiers ",(0,s.jsx)(n.code,{children:".h"}),", lors d'une programmation modulaire.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Lors d'une inclusion, on d\xe9fini une variable. Ainsi, si on tente \xe0 nouveau cette inclusion, il suffit de tester si la variable d\xe9fini existe d\xe9j\xe0, si oui, on ne refait pas l'inclusion."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"#ifndef __BIBLIOTEQUE_H__\r\n#define __BIBLIOTEQUE_H__\r\n\r\n<instructions>\r\n\r\n#endif  __BIBLIOTEQUE_H__\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"#ifndef NOM"})," et ",(0,s.jsx)(n.code,{children:"#endif NOM"})," : Ce sont aussi des directives, elles permettent de tester l'existence ou non de la constante ",(0,s.jsx)(n.code,{children:"NOM"}),". C'est \xe0 coupler avec ",(0,s.jsx)(n.code,{children:"#define NOM"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Exemple :"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\r\n\r\n#define TVA 20\r\n#define PRIX_HT 100\r\n#define PRIX_TTC (PRIX_HT+PRIX_HT*TVA/100)\r\n#define afficher printf\r\n#define Coucou printf("Coucou tout le monde ! \\n")\r\n\r\n//Equivalent du main\r\nint main()\r\n{\r\n    // "TVA" va valloir "20" lors du preprocessing\r\n    // "afficher" va valloir "printf" lors du preprocessing\r\n    afficher("La TVA vaut %d \\n",TVA);\r\n\r\n    // "Coucou" va valloir "printf("Coucou tout le monde ! \\n")" lors du preprocessing\r\n    Coucou;\r\n\r\n    afficher("Le prix HT est %d, la TVA est de %d, le prix TTC est %d \\n", PRIX_HT, TVA, PRIX_TTC);\r\n\r\n    afficher("Le fichier se nomme : %s \\n", __FILE__);\r\n\r\n    return 0;\r\n}\r\n\r\n// ----- D\xe9but Affichage console ----- //\r\nLa TVA vaut 20 \r\nCoucou tout le monde ! \r\nLe prix HT est 100, la TVA est de 20, le prix TTC est 120 \r\nLe fichier se nomme : main.c\r\n// ----- Fin Affichage console ----- //\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"pointeurs",children:"Pointeurs"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Il existe deux notations \xe9quivalentes :","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"pointeurP1->nom"})," et ",(0,s.jsx)(n.code,{children:"(*pointeurP1).nom"}),". La premi\xe8re est plus claire et simple."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Pointeur : variable contenant l'adresse d'une autre variable."}),"\n",(0,s.jsx)(n.li,{children:"Un pointeur permet \xe0 une fonction de modifier des donn\xe9es."}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%p"})," : permet d'afficher l'adresse d'une variable ou d'un pointeur."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Variables"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"maVariable"})," : valeur de la variable"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"&maVariable"})," : adresse de la variable"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Pointeurs"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"monPointeur"})," : adresse de la variable point\xe9e"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"*monPointeur"})," : valeur de la variable point\xe9e"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"&monPointeur"})," : adresse du pointeur"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"<typeVariableA> *monPointeur = variableA;"})," (comme type pour le pointeur, on indique le type de la valeur vers laquelle le pointeur pointe)."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"*monPointeur = NULL"})," ou ",(0,s.jsx)(n.code,{children:"*monPointeur = &maVariable"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Int\xe9r\xeat des pointeurs dans les fonctions :"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Lorsqu'une fonction fini de s'ex\xe9cuter, ses variables locales sont supprim\xe9es."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Il faudrait utiliser un ",(0,s.jsx)(n.code,{children:"return"})," pour renvoyer une valeur pouvant \xeatre r\xe9cup\xe9r\xe9 dans le main. Cependant, si on a deux valeurs \xe0 retourner, on ne peut pas faire de :"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"void fonction(){\r\n        int valeur1 = 1;\r\n        int valeur2 = 2;\r\n        return valeur1;\r\n        return valeur2;\r\n}\r\n// Ici, seul le premier return sera ex\xe9cut\xe9. La fonction renvoie 1.\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"La solution r\xe9side dans les pointeurs. On ne passe pas en param\xe8tre la valeur d\u2019une variable mais son adresse. On peut alors modifier sa valeur depuis une fonction, via son adresse."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\r\n\r\n/*\r\n    Cette fonction ne permet pas de changer la valeur du nombre pass\xe9 en param\xe8tre car\r\n    lorsqu\'une fonction fini de s\'ex\xe9cuter, les variables locales la composant sont supprim\xe9es.\r\n*/\r\nvoid changementNombreNonFonctionnel(int nombre)\r\n{\r\n    nombre = 10;\r\n}\r\n\r\nvoid changementNombreAvecPointeurs(int *nombre)\r\n{\r\n    *nombre = 20;\r\n}\r\n\r\nint main()\r\n{\r\n\r\n    int nombreA = 15 ;\r\n\r\n    printf("nombreA vaut : %d \\n", nombreA); // 15\r\n    printf("L\'adresse de nombreA est : %p \\n", &nombreA); // impr\xe9visible_1\r\n\r\n    changementNombreNonFonctionnel(nombreA);\r\n    printf("nombreA vaut toujours : %d \\n", nombreA); // 15\r\n\r\n    changementNombreAvecPointeurs(&nombreA);\r\n    printf("Grace aux pointeurs, nombreA vaut maintenant : %d \\n", nombreA); // 20\r\n\r\n    // Le fait de mettre " * " lors de la d\xe9claration du pointeur a pour but de justement indiquer qu\'on a affaire \xe0 un pointeur.\r\n    // Dans les faits, c\'est plut\xf4t "pointeurVersNombreA" que nous d\xe9clarons.\r\n    int *pointeurVersNombreA = NULL;\r\n    pointeurVersNombreA = &nombreA;\r\n\r\n    printf("\\n\\nValeur du pointeurVersNombreA : %p \\n", pointeurVersNombreA); // 20\r\n    printf("Adresse de nombreA : %p \\n", &nombreA); // impr\xe9visible_1\r\n    printf("Ces deux valeurs sont normalement egales ! En effet, pointeurVersNombreA pointe vers l\'adresse de nombreA. \\n\\n");\r\n\r\n    printf("Adresse contenue dans le pointeur : %p \\n", pointeurVersNombreA); // impr\xe9visible_1\r\n    printf("Valeur vers laquelle pointe l\'adresse indique dans le pointeur : %d \\n", *pointeurVersNombreA); // 20\r\n    printf("(Adresse du pointeur lui-meme : %p \\n", &pointeurVersNombreA); // impr\xe9visible_2\r\n\r\n    return 0;\r\n}\r\n\r\n// ----- D\xe9but Affichage console ----- //\r\nValeur du pointeurVersNombreA : 0x7ffec12f475c \r\nAdresse de nombreA : 0x7ffec12f475c \r\nCes deux valeurs sont normalement egales ! En effet, pointeurVersNombreA pointe vers l\'adresse de nombreA. \r\n\r\nAdresse contenue dans le pointeur : 0x7ffec12f475c \r\nValeur vers laquelle pointe l\'adresse indique dans le pointeur : 20 \r\n(Adresse du pointeur lui-meme : 0x7ffec12f4760\r\n// ----- Fin Affichage console ----- //\r\n\n'})}),"\n",(0,s.jsx)(n.h3,{id:"tableaux",children:"Tableaux"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Un tableau est un pointeur (vers son premier \xe9l\xe9ment)."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"D\xe9claration tableau"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:" <type> <nom_tableau>[X] // X repr\xe9sente la taille du tableau. Valeurs al\xe9atoires si pas d'affectation.\r\nint tableauCinqEntier[5];\r\n        \n"})}),"\n",(0,s.jsx)(n.p,{children:"Dans la m\xe9moire, on aura 5 cases d'affil\xe9es."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Initialisation"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"int tableau[5] = {5, -4, 0, -10, 8};\r\nint tableau[5] = {};  // Toutes les cases valent 0\r\nint tableau[5] = {0}; // Toutes les cases valent 0\r\nint tableau[5] = {4}; // Seul la premi\xe8re valeur vaut 4, le reste vaut 0\r\nint tableau[3,2] = { {1,2}, {3,4}, {5,6} };\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Acc\xe8s au tableau"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"tableau[X]    // \xe9l\xe9ment d'indice X (X+1\xe8me \xe9lement du tableau)\r\ntableau       // adresse du tableau (pas besoin de &, c'est d\xe9j\xe0 une adresse).\r\n*tableau      // premier \xe9lement du tableau\r\n*(tableau+X)  // \xe9l\xe9ment d'indice X\r\n\r\n// Notation\r\ntableau[X] <=> *(tableau + X)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Exemple 1 :"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\r\n\r\nint main()\r\n{\r\n\r\n    int tableau[5] = {5, -4, 0, -10, 8};\r\n    printf("valeur: %p \\n",tableau);\r\n    printf("valeur : %p \\n",&tableau);\r\n    printf("valeur : %p \\n",&tableau[0]);\r\n    printf("valeur : %d \\n",tableau[0]);\r\n    printf("valeur : %d \\n",*tableau);\r\n    printf("valeur : %d \\n",tableau[3]);\r\n    printf("valeur : %d \\n",*(tableau+1));\r\n    printf("valeur : %d \\n",*tableau+1);\r\n    \r\n    return 0;\r\n}\r\n\r\n// ----- D\xe9but Affichage console ----- //\r\nvaleur: 0x7ffdec158c30 \r\nvaleur : 0x7ffdec158c30 \r\nvaleur : 0x7ffdec158c30 \r\nvaleur : 5 \r\nvaleur : 5 \r\nvaleur : -10 \r\nvaleur : -4 \r\nvaleur : 6 \r\n// ----- Fin Affichage console ----- //\n'})}),"\n",(0,s.jsx)(n.p,{children:"Exemple 2 :"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\r\n\r\n#define NOMBRE_LIGNES 3\r\n#define NOMBRE_COLONNES 2\r\n\r\n// on peut mettre en ent\xeate "int tab[]" ou "int *tab"\r\nvoid afficher_tableau(int tab[], int taille)\r\n{\r\n    for(int i = 0 ; i < taille ; i++)\r\n    {\r\n        printf("[ %d ]", tab[i]);\r\n    }\r\n    printf("\\n\\n");\r\n}\r\n\r\n// On retourne un pointeur donc " * "\r\nint* creer_tableau(int* taille_nouveau_tableau)\r\n{\r\n    static int tableau_entier[5]; // Le static permet de ne pas d\xe9truire "tableau_entier" apr\xe8s l\'ex\xe9cution de la fonction.\r\n    for (int i = 0; i < 5; i++)\r\n    {\r\n        (*taille_nouveau_tableau)++;\r\n        tableau_entier[i]=i*5;\r\n    }\r\n    return tableau_entier;\r\n\r\n}\r\n\r\nint main()\r\n{\r\n    int tableau[5] = {5, -4, 0, -10, 8};\r\n    printf("Valeur de tableau[2] : %d \\n", tableau[2]);\r\n\r\n    for(int i = 0; i < 5; i++)\r\n    {\r\n        printf("[ %d ]", tableau[i]);\r\n    }\r\n\r\n    printf("\\n\\n");\r\n    tableau[2] = 777;\r\n\r\n    int taille_tableau = sizeof(tableau)/sizeof(tableau[0]); // On divise la taille total du tableau en octet par la taille en octet d\'un \xe9l\xe9ment du tableau.\r\n    afficher_tableau(tableau, taille_tableau);\r\n\r\n    int taille_nouveau_tableau = 0;\r\n    int* nouveauTableau = creer_tableau(&taille_nouveau_tableau); // On ne connait pas la longueur du tableau donc on utilise la notation *tableau et pas tableau[X].\r\n\r\n    //afficher_tableau(nouveauTableau, sizeof(nouveauTableau)/sizeof(nouveauTableau[0])); // Ne fonctionne pas, car nouveauTableau est un pointeur, pas un tableau.\r\n    printf("Valeur : %d \\n",taille_nouveau_tableau);\r\n    afficher_tableau(nouveauTableau, taille_nouveau_tableau);\r\n\r\n    int tableau2D[NOMBRE_LIGNES][NOMBRE_COLONNES] =\r\n    {\r\n        {1,2},\r\n        {3,4},\r\n        {5,6}\r\n    };\r\n\r\n    for(int i = 0; i<NOMBRE_LIGNES;i++)\r\n    {\r\n        for (int j=0; j<NOMBRE_COLONNES;j++)\r\n        {\r\n            printf("[ %d ]", tableau2D[i][j]);\r\n        }\r\n        printf("\\n");\r\n    }\r\n    return 0;\r\n}\r\n// ----- D\xe9but Affichage console ----- //\r\nValeur de tableau[2] : 0 \r\n[ 5 ][ -4 ][ 0 ][ -10 ][ 8 ]\r\n\r\n[ 5 ][ -4 ][ 777 ][ -10 ][ 8 ]\r\n\r\nValeur : 5 \r\n[ 0 ][ 5 ][ 10 ][ 15 ][ 20 ]\r\n\r\n[ 1 ][ 2 ]\r\n[ 3 ][ 4 ]\r\n[ 5 ][ 6 ]\r\n// ----- Fin Affichage console ----- //\r\n\n'})}),"\n",(0,s.jsx)(n.h3,{id:"chaines-de-caract\xe8res",children:"Chaines de caract\xe8res"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Une chaine de caract\xe8res c\u2019est du texte."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Une chaine de caract\xe8res c'est un tableau de char. Chaque \xe9l\xe9ments du tableau est un caract\xe8re + caract\xe8re ",(0,s.jsx)(n.code,{children:"\\0"})," pour symboliser la fin de la chaine."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"On ne peut pas changer la taille d'un tableau (d'une chaine de caract\xe8res) en cours de programme. On ne peut pas faire :"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'char mot[] = "boite";\r\nmot = "chaussure";\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Quelques fonctions de chaines de caract\xe8res, issues du module ",(0,s.jsx)(n.code,{children:"<string.h>"}),"."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"strcpy()"})," : copie d'une chaine dans une autre."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"strcpy(<chaine_destination>,<chaine_source>)\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"strlen()"}),"  : retourne la longueur d'une chaine. Caract\xe8re de fin de chaine ",(0,s.jsx)(n.code,{children:"\\0"})," non inclus."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"strcmpt()"})," : comparer deux chaines (ordre alphab\xe9tique)."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"strcat()"}),"  : concat\xe9ner deux chaines."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"strstr()"}),"  : chercher une chaine dans une autre."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"strchr()"}),"  : cherche la 1ere occurrence d'un caract\xe8re."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"sprintf()"})," : \xe9crire dans une chaine. (fonction de ",(0,s.jsx)(n.code,{children:"stdio.h"}),") -> La diff\xe9rence avec ",(0,s.jsx)(n.code,{children:"strcpy"})," c'est qu'on peut formater la string."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\r\n#include <string.h>\r\n\r\nint main()\r\n{\r\n    char texte[] = "Bonjour a tous :)";\r\n    printf("texte vaut : %s \\n", texte);\r\n\r\n    char prenom[6] = "Barth"; // prenom[6] et non pas prenom[5] car il ne faut pas oublier le caract\xe8res de fin de chaine "\\0". Sinon quand on print, on affichera au dela de la longueur de la chaine.\r\n    printf("prenom vaut : %s \\n", prenom);\r\n\r\n    char probleme[5] = "Hello";\r\n    printf("probleme vaut : %s \\n", probleme); // Affiche la chaine suivante dans la m\xe9moire, jusqu\'au prochain caract\xe8re "\\0".\r\n\r\n    char chaine[5] = {\'n\',\'o\',\'e\',\'l\'}; // symbole \', pas ".\r\n    printf("chaine vaut : %s \\n", chaine);\r\n    chaine[3] = \'X\';\r\n    printf("chaine vaut : %s \\n", chaine);\r\n\r\n    /*------------------------------------------------------*/\r\n\r\n    char demandePrenom[20] = "Jean-Daniel";\r\n    printf("Ton prenom est : %s\\n", demandePrenom);\r\n    printf("Quel est ton prenom ? ");\r\n    scanf("%s",demandePrenom);\r\n    printf("Ton prenom est : %s\\n", demandePrenom);\r\n    printf("Quel est ton prenom ? ");\r\n    scanf("%s",demandePrenom);\r\n    printf("Ton prenom est : %s\\n", demandePrenom);\r\n        // Pas besoin de &demandePrenom car demandePrenom est un tableau donc c\'est d\xe9j\xe0 une adresse m\xe9moire.\r\n\r\n    /*------------------------------------------------------*/\r\n    \r\n    char alphabet[27];\r\n    char alphabet1[11];\r\n    char alphabet2[11];\r\n    printf("Ecrit l\'alphabet : \\n"); //On saisira : abcdefghijklmnopqrstuvwxyz\r\n    scanf("%10s",alphabet1);\r\n    scanf("%10s",alphabet2);\r\n    printf("Alphabet 1 : %s | Alphabet 2 : %s",alphabet1, alphabet2);\r\n\r\n    /*------------------------------------------------------*/\r\n\r\n    char ville[25] = "Paris";\r\n    char autreVille[25] = "Buenos Aires";\r\n\r\n    printf("ville vaut : %s \\n", ville);\r\n    printf("autreVille vaut : %s \\n", autreVille);\r\n\r\n    /*\r\n    ville=autreVille;\r\n        Cela ne fonctionne pas.\r\n        Pour faire quelque chose de similaire, on importe <string.h> : #include <string.h>\r\n        Et on utilise la fonction strcpy(<chaine_destination>,<chaine_source>)\r\n    */\r\n    strcpy(ville,autreVille);\r\n\r\n    printf("ville vaut maintenant : %s \\n", ville);\r\n    printf("ville a une longueur de : %d \\n", strlen(ville));\r\n\r\n    /*------------------------------------------------------*/\r\n\r\n    char mot1[10] = "Barth";\r\n    char mot2[10] = "Bateau";\r\n\r\n    int test = strcmp(mot1,mot2);\r\n\r\n    if(test == 0)\r\n    {\r\n        printf("Les deux mots sont les memes \\n");\r\n    }\r\n    else if (test < 0)\r\n    {\r\n        printf("%s est avant dans l\'alphabet par rapport a %s \\n", mot1, mot2);\r\n    }else if (test > 0)\r\n    {\r\n        printf("%s est apr\xe8s dans l\'alphabet par rapport a %s \\n", mot1, mot2);\r\n    }\r\n\r\n    // Il faut utiliser une variable concat[] et concatener 1 par 1. Ne pas faire concat = strcat(mot1,mot2), car \xe7a affecte mot1 et mot2.\r\n    char concat[20] = "";\r\n    strcat(concat, mot1);\r\n    strcat(concat, mot2);\r\n    printf("On concatene %s et %s, et on obtient : %s \\n", mot1, mot2, concat);\r\n\r\n    char chaineRecherche[] = "rts";\r\n    if (strstr(mot1, chaineRecherche))\r\n    {\r\n        printf("On a trouve %s dans %s \\n", chaineRecherche, mot1);\r\n    }else{\r\n        printf("On n\'a pas trouve %s dans %s \\n", chaineRecherche, mot1);\r\n    }\r\n\r\n    char charRecherche = \'r\';\r\n    /*\r\n    char resultat[] = "";\r\n    strcpy(resultat,strchr(mot1, charRecherche));\r\n        Ca ca fonctionne mais en dessous \xe7a tient en une ligne. strchr renvoie un pointeur.\r\n    */\r\n    char* resultat = strchr(mot1, charRecherche); // char car resultat pointe vers une chaine de characteres.\r\n    printf("Dans %s, apres %c, vient : %s \\n",mot1, charRecherche, resultat+1);\r\n\r\n    char chaine1[50] = "Bonjour";\r\n\r\n    // Utilisation de sprintf pour ajouter du texte \xe0 chaine1\r\n    sprintf(chaine1, "%s tout le monde et %s.", chaine1, mot1); // Formatage s\xe9curis\xe9\r\n    printf("chaine1 vaut maintenant : %s\\n", chaine1);\r\n    \r\n    return 0;\r\n}\r\n\r\n// ----- D\xe9but Affichage console ----- //\r\ntexte vaut : Bonjour a tous :)\r\nprenom vaut : Barth\r\nprobleme vaut : HelloBarth\r\nchaine vaut : noel\r\nchaine vaut : noeX\r\nTon prenom est : Jean-Daniel\r\nQuel est ton prenom ? Paul\r\nTon prenom est : Paul\r\nQuel est ton prenom ? Pierre\r\nTon prenom est : Pierre\r\nEcrit l\'alphabet :\r\nabcdefghijklmnopqrstuvwxyz\r\nAlphabet 1 : abcdefghij | Alphabet 2 : klmnopqrst\r\nville vaut : Paris\r\nautreVille vaut : Buenos Aires\r\nville vaut maintenant : Buenos Aires\r\nville a une longueur de : 12\r\nBarth est avant dans l\'alphabet par rapport a Bateau\r\nOn concatene Barth et Bateau, et on obtient : BarthBateau\r\nOn n\'a pas trouve rts dans Barth\r\nDans Barth, apres r, vient : th\r\nchaine1 vaut maintenant : Bonjour tout le monde et Barth.\r\n// ----- Fin Affichage console ----- //\n'})}),"\n",(0,s.jsx)(n.h3,{id:"structures-et-types-en-c",children:"Structures et types en C"}),"\n",(0,s.jsx)(n.p,{children:"Structure, type, \xe9num\xe9ration et union."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Structure"})," : Une structure en C est une collection de variables de diff\xe9rents types regroup\xe9es sous un m\xeame nom, permettant de cr\xe9er un enregistrement de donn\xe9es."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Type"}),' : En C, le terme "type" se r\xe9f\xe8re \xe0 la cat\xe9gorie de donn\xe9es qu\'une variable peut stocker, telle que ',(0,s.jsx)(n.code,{children:"int"}),", ",(0,s.jsx)(n.code,{children:"float"}),", ",(0,s.jsx)(n.code,{children:"char"}),", etc."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Enum\xe9ration"})," : Une \xe9num\xe9ration en C est une liste de valeurs symboliques nomm\xe9es, repr\xe9sentant un ensemble discret d'options ou de constantes."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Union"})," : permet de stocker diff\xe9rents types de donn\xe9es au m\xeame emplacement m\xe9moire."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"On positionne une structure au dessus du main. (voir m\xeame dans les fichiers d'ent\xeates."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Une structure permet un regroupement de donn\xe9es."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Structure \xe0 deux champs"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"struct PersonneStructure\r\n{\r\n    char prenom[50];\r\n    int age;\r\n};\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Type (structure que l\u2019on transforme en un type)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'typedef struct PersonneType\r\n{\r\n    char prenom[50];\r\n    int age;\r\n}Personne;\r\n\r\n//OU pour simplifier. typedef permet de signifier "Personne" est un alias de "PersonneType". Mais si on a pas l\'intention d\'utiliser "struct PersonneType" mais simplement l\'alias, alors la version suivante est plus simple : \r\n\r\ntypedef struct\r\n{\r\n    char prenom[50];\r\n    int age;\r\n}Personne;\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Enum\xe9ration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"typedef enum Booleen{\r\n    false, // 0 par d\xe9faut\r\n    true   // 1 par d\xe9faut\r\n}Booleen;\r\n\r\n//OU plus simplement : \r\n\r\ntypedef enum{\r\n    false, // 0 par d\xe9faut\r\n    true   // 1 par d\xe9faut\r\n}Booleen;\r\n\r\ntypedef enum MarqueVoiture{\r\n    RENAULT = 10,\r\n    PEUGEOT = 20,\r\n    CITROEN = 30\r\n}Marque;\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Union"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"union Nombre {\r\n    int entier;\r\n    float decimal;\r\n};\r\n\r\n//Les deux membres partagent la m\xeame zone m\xe9moire, donc l'union ne peut stocker qu'une seule valeur \xe0 la fois. A la diff\xe9rence d'une structure qui a un emplacement m\xe9moire par champ.\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'// Cette structrure a 2 champs.\r\nstruct PersonneStructure\r\n{\r\n    char prenom[50];\r\n    int age;\r\n};\r\n\r\n// Ceci est un type.\r\ntypedef struct\r\n{\r\n    char prenom[50];\r\n    int age;\r\n}Personne ;\r\n\r\n// Ceci est une \xe9num\xe9ration\r\ntypedef enum Booleen{\r\n    false, // 0 par d\xe9faut\r\n    true   // 1 par d\xe9faut\r\n}Booleen;\r\n\r\n// Ceci est une \xe9num\xe9ration\r\ntypedef enum{\r\n    RENAULT = 10,\r\n    PEUGEOT = 20,\r\n    CITROEN = 30\r\n}Marque;\r\n\r\n// Ceci est une union\r\nunion Nombre {\r\n    int entier;\r\n    float decimal;\r\n};\r\n\r\nvoid create_personne(Personne *perso)\r\n{\r\n    strcpy((*perso).prenom,"John");\r\n    // OU strcpy((perso->prenom,"John");\r\n    (*perso).age = 20;\r\n}\r\n\r\nvoid afficher_personne(Personne *perso)\r\n{\r\n    printf("Nom : %s \\n", (*perso).prenom);\r\n    printf("Age : %d \\n", (*perso).age);\r\n}\r\n\r\nint main()\r\n{\r\n    struct PersonneStructure p1 = {"Jean", 18};\r\n    printf("Nom : %s \\n", p1.prenom);\r\n    printf("Age : %d \\n", p1.age);\r\n\r\n    Personne p2 = {"Paul", 17};\r\n    printf("Nom : %s \\n", p2.prenom);\r\n    printf("Age : %d \\n", p2.age);\r\n\r\n    Personne p3 = {"",0};\r\n    create_personne(&p3);\r\n    afficher_personne(&p3);\r\n\r\n    Booleen estGrand = false;\r\n    Booleen estPetit = true;\r\n    printf("\\n estGrand vaut : %d \\n", estGrand);\r\n    printf(" estPetit vaut : %d \\n", estPetit);\r\n\r\n    Marque Kangoo = RENAULT;\r\n    printf("\\n");\r\n    printf("Kangoo : %d \\n", Kangoo);\r\n    printf("PEUGEOT : %d \\n", PEUGEOT);\r\n    printf("CITROEN : %d \\n", CITROEN);\r\n\r\n    \r\n    union Nombre nb1;\r\n    // On utilise les attributs un par un car 1 seul case m\xe9moire par union.\r\n    nb1.decimal = 3.14;\r\n    printf("nb1 en decimal vaut : %.2f \\n", nb1.decimal);\r\n\r\n    nb1.entier = 3;\r\n    printf("nb1 en entier vaut : %d \\n", nb1.entier);\r\n\r\n    return 0;\r\n}\r\n\r\n// ----- D\xe9but Affichage console ----- //\r\nNom : Jean\r\nAge : 18\r\nNom : Paul\r\nAge : 17\r\nNom : John\r\nAge : 20\r\n\r\n estGrand vaut : 0\r\n estPetit vaut : 1\r\n\r\nKangoo : 10\r\nPEUGEOT : 20\r\nCITROEN : 30\r\nnb1 en decimal vaut : 3.14\r\nnb1 en entier vaut : 3\r\n// ----- Fin Affichage console ----- //\n'})}),"\n",(0,s.jsx)(n.h3,{id:"allocation-dynamique-de-m\xe9moire",children:"Allocation dynamique de m\xe9moire"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Il faut importer la biblioth\xe8que ",(0,s.jsx)(n.code,{children:"<stdlib.h>"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"sizeof(<donnee ou type_de_donnee>)"})," : retourne la taille en octets d'une donn\xe9e ou d'un type."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"malloc(<taille_en_octets>)"})," : allouer dynamiquement une zone m\xe9moire.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"<taille_en_octets> = <donnee> * sizeof(<type>)"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"free(<donnee_allouee>)"})," : lib\xe8re la m\xe9moire alou\xe9e dynamiquement."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"calloc(<donnee>, sizeof(<type>))"})," : alloue et initialise tout \xe0 0."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"realloc(<donne>, <taille_en_octets>)"})," : r\xe9alloue un espace m\xe9moire (on peut l'agrandir","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"<taille_en_octets> = <donnee> * sizeof(<type>)"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'// Biblioteque qui fournit des fonctions pour l\'entr\xe9e/sortie standard (ex: printf, scanf) en langage C.\r\n#include <stdio.h>\r\n// Bibliot\xe8que qui contient des fonctions pour la gestion de la m\xe9moire dynamique (ex: malloc, free) et d\'autres utilitaires en langage C.\r\n#include <stdlib.h>\r\n\r\ntypedef struct{\r\n    char prenom[50];\r\n    int age;\r\n} Personne ;\r\n\r\nvoid afficher_personne(Personne *personne){\r\n    printf("Prenom : %s \\n", (*personne).prenom);\r\n    printf("Age : %d \\n", (*personne).age);\r\n}\r\n\r\n// Great success.\r\nvoid testComplexe(){\r\n\r\n    int choix_nb_personne = 0;\r\n    Personne *liste_personne = NULL;\r\n\r\n    printf("Combien de personnes dans la liste : ");\r\n    scanf("%d", &choix_nb_personne);\r\n\r\n    liste_personne = calloc(choix_nb_personne, sizeof(Personne));\r\n\r\n    for (int i=0; i<choix_nb_personne; i++){\r\n        printf("Prenom de la personne numero %d : ",i);\r\n        scanf("%s",(liste_personne[i]).prenom);\r\n        printf("Age de la personne numero %d : ",i);\r\n        scanf("%d",&((liste_personne[i]).age));\r\n    }\r\n\r\n    printf("\\n\\n -------------------- \\n\\n");\r\n\r\n    for(int i =0 ; i<choix_nb_personne; i++){\r\n        afficher_personne(&liste_personne[i]);\r\n        printf("\\n******\\n");\r\n    }\r\n\r\n    free(liste_personne);\r\n\r\n}\r\n\r\nint main()\r\n{\r\n    testComplexe();\r\n\r\n    printf("Hello \\n");\r\n\r\n    int nombrePersonnes = 0;\r\n    int *liste_age_personne = NULL;\r\n\r\n    nombrePersonnes = 2;\r\n\r\n    //liste_age_personne = malloc(nombrePersonnes * sizeof(int)); // Valeurs al\xe9atoires dans l\'espace m\xe9moire reserv\xe9.\r\n    liste_age_personne = calloc(nombrePersonnes, sizeof(int));    // Des 0 dans l\'espace m\xe9moire r\xe9serv\xe9.\r\n\r\n    if(liste_age_personne == NULL){ // Si probl\xe8me lors de l\'allocation dynamique, on arr\xeate.\r\n        exit(0);\r\n    }\r\n\r\n    for (int i = 0 ; i < nombrePersonnes ; i++){\r\n        printf("Personne numero : %d et son age est %d \\n",i, i*12);\r\n        liste_age_personne[i] = i*12 ;\r\n    }\r\n\r\n    for (int i = 0 ; i < nombrePersonnes ; i++){\r\n        printf(" [ %d ] ", liste_age_personne[i]);\r\n    }\r\n    printf("\\n");\r\n\r\n    /*--------------------------- realloc() ---------------------------*/\r\n\r\n    nombrePersonnes = 5;\r\n    liste_age_personne = realloc(liste_age_personne, nombrePersonnes * sizeof(int));\r\n    for (int i = 0 ; i < nombrePersonnes ; i++){\r\n        printf("Personne numero : %d et son age est %d \\n",i, i*12);\r\n        liste_age_personne[i] = i*12 ;\r\n    }\r\n\r\n    for (int i = 0 ; i < nombrePersonnes ; i++){\r\n        printf(" [ %d ] ", liste_age_personne[i]);\r\n    }\r\n    printf("\\n");\r\n\r\n    free(liste_age_personne);\r\n\r\n    return 0;\r\n}\r\n\r\n// ----- D\xe9but Affichage console ----- //\r\n\r\nCombien de personnes dans la liste : 3\r\nPrenom de la personne numero 0 : Jean\r\nAge de la personne numero 0 : 12\r\nPrenom de la personne numero 1 : Paul\r\nAge de la personne numero 1 : 14\r\nPrenom de la personne numero 2 : Marc\r\nAge de la personne numero 2 : 16\r\n\r\n --------------------\r\n\r\nPrenom : Jean\r\nAge : 12\r\n\r\n******\r\nPrenom : Paul\r\nAge : 14\r\n\r\n******\r\nPrenom : Marc\r\nAge : 16\r\n\r\n******\r\nHello\r\nPersonne numero : 0 et son age est 0\r\nPersonne numero : 1 et son age est 12\r\n [ 0 ]  [ 12 ]\r\nPersonne numero : 0 et son age est 0\r\nPersonne numero : 1 et son age est 12\r\nPersonne numero : 2 et son age est 24\r\nPersonne numero : 3 et son age est 36\r\nPersonne numero : 4 et son age est 48\r\n [ 0 ]  [ 12 ]  [ 24 ]  [ 36 ]  [ 48 ]\r\n// ----- Fin Affichage console ----- //\n'})}),"\n",(0,s.jsx)(n.h3,{id:"fichiers",children:"Fichiers"}),"\n",(0,s.jsx)(n.p,{children:"Fonctions d\u2019ouverture et la fermeture de fichiers :"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"fopen(<fichier>, <mode_ouverture>)"})," : ouvrir un fichier","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Les modes d\u2019ouvertures sont :","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"r"})," : lecture seule, fichier doit exister"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"w"})," : \xe9criture seule + \xe9crase, cr\xe9e si inexistant"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"a"})," : \xe9criture seule + ajout en fin de fichier, cr\xe9\xe9 si inexistant"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"r+"})," : lecture/\xe9criture, fichier doit exister"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"w+"})," : lecture/\xe9criture+ \xe9crase, cr\xe9e si inexistant"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"a+"})," : ajout lecture/\xe9criture, ajout en fin de fichier, cr\xe9e si inexistant"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"fclose(<fichier>)"})," : fermer un fichier ouvert"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"feof(<fichier>)"}),"   : tester la fin d'un fichier"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Fonctions de lecture :"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"fgetc(<fichier>)"})," : lire un caract\xe8re"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"fgets(<chaine>, <taille_chaine>, <fichier>)"})," : lire une ligne"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"fscanf(<fichier>, <format>, ...)"})," : lire un texte format\xe9"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Fonctions d\u2019\xe9criture :"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"fputc(<caractere>, <fichier>)"})," : ecrit un caract\xe8re"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"fputs(<chaine>, <fichier>)"})," : ecrit une chaine de caract\xe8res"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"fprintf(<fichier>, <format>, ...)"})," : ecrit du texte format\xe9"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Fonctions de positionnement de curseur :"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ftell(<fichier>)"})," : retourne position curseur dans fichier"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"fseek(<fichier>, <deplacement>, <origine>)"})," : d\xe9placement curseur","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"<origine>"})," peut valoir :","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"SEEK_SET"})," : d\xe9but fichier"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"SEEK_CUR"})," : position courante"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"SEEK_END"})," : fin fichier"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"rewind(<fichier>)"})," : r\xe9initialise la position du curseur (d\xe9but du fichier)"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Fonctions diverses :"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"rename(<ancien_nom>, <nouveau_nom>)"})," : renommer"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"remove(<nom_fichier>)"})," : supprimer (attention : irr\xe9versible)"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"LECTURE"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\r\n\r\nint nbLignesFichier(FILE *fichier)\r\n{\r\n    char buffer[1024];\r\n    int nbLignes = 0;\r\n\r\n    while(fgets(buffer, sizeof(buffer), fichier) != NULL)\r\n    {\r\n        nbLignes++;\r\n    }\r\n    rewind(fichier);\r\n    //Pareil que rewind() : fseek(fichier, 0, SEEK_SET);\r\n    return nbLignes;\r\n}\r\n\r\nint main(){\r\n\r\n    /** LECTURE **/\r\n    FILE *fic = fopen("texte.txt","r");\r\n    char lettre;\r\n    char ligne[256];\r\n    char mot_A[50];\r\n    char mot_B[50];\r\n    char ignore[50];\r\n\r\n    if(fic == NULL){\r\n        printf("Fichier non accessible");\r\n        exit(0);\r\n    } // On n\'a pas r\xe9ussi \xe0 ouvrir le fichier\r\n\r\n    printf("Nombre de lignes : %d \\n",nbLignesFichier(fic));\r\n\r\n    // Lecture caract\xe8re par caract\xe8re\r\n    while((lettre = fgetc(fic)) != EOF)\r\n    {\r\n        printf("%c_", lettre);\r\n    }\r\n    printf("\\n");\r\n\r\n    // Retour du curseur au d\xe9but du fichier\r\n    rewind(fic);\r\n\r\n    // Lecture ligne par ligne\r\n    while(fgets(ligne, 256, fic) != NULL){\r\n        printf("Ligne vaut : %s", ligne);\r\n    }\r\n\r\n    // Retour du curseur au d\xe9but du fichier\r\n    rewind(fic);\r\n\r\n    // Lecture format\xe9e\r\n    fscanf(fic, "%s %s %s %s",mot_A ,ignore ,ignore, mot_B);\r\n    printf("Mot 1 : %s \\n", mot_A);\r\n    printf("Mot 4 : %s \\n", mot_B);\r\n\r\n    fclose(fic);\r\n\r\n    return 0;\r\n}\r\n\r\n// ----- texte.txt avant ----- //\r\nHello World!\r\nComment vas-tu ?\r\n\r\n// ----- Fin texte.txt avant----- //\r\n// ----- D\xe9but texte.txt apr\xe8s ----- //\r\nNombre de lignes : 2\r\nH_e_l_l_o_ _W_o_r_l_d_!_\r\n_C_o_m_m_e_n_t_ _v_a_s_-_t_u_ _?_\r\n_\r\nLigne vaut : Hello World!\r\nLigne vaut : Comment vas-tu ?\r\nMot 1 : Hello\r\nMot 4 : vas-tu\r\n// ----- Fin texte.txt apr\xe8s ----- //\n'})}),"\n",(0,s.jsx)(n.p,{children:"ECRITURE"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\r\n\r\nint main(){\r\n\r\n    /** ECRITURE **/\r\n    FILE *fichier = fopen("texte.txt","a");\r\n\r\n    if (fichier == NULL) {\r\n        printf("Erreur : impossible d\'ouvrir le fichier.\\n");\r\n        return 1;\r\n    }\r\n\r\n    // Ajout de caract\xe8res\r\n    fputc(\'B\', fichier);\r\n    fputc(\'4\', fichier);\r\n    fputc(\'\\n\', fichier);\r\n\r\n    //Ajout d\'une ligne\r\n    char ajoutLigne[50]="Hello tout le monde :) \\n";\r\n    fputs(ajoutLigne,fichier);\r\n\r\n    // Ajout d\'une ligne format\xe9e\r\n    int age = 25;\r\n    char prenom[20] = "Nicolas";\r\n    fprintf(fichier, "\\nPr\xe9nom : %s | Age : %d", prenom, age);\r\n\r\n    fclose(fichier);\r\n}\r\n\r\n// ----- D\xe9but texte.txt avant ----- //\r\nHello World!\r\nComment vas-tu ?\r\n\r\n// ----- Fin texte.txt avant----- //\r\n// ----- D\xe9but texte.txt apr\xe8s ----- //\r\nHello World!\r\nComment vas-tu ?B4\r\nHello tout le monde :) \r\n\r\nPr\xe9nom : Nicolas | Age : 25\r\n// ----- Fin texte.txt apr\xe8s ----- //\n'})}),"\n",(0,s.jsx)(n.p,{children:"POSITIONNEMENT CURSEUR et DIVERS"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\r\n\r\nint main(){\r\n    /** CURSEURS **/\r\n    FILE *fichier = fopen("texte.txt","r");\r\n    int position_curseur = -1;\r\n\r\n    printf("Position curseur : %d \\n", ftell(fichier));\r\n    fseek(fichier, 5, SEEK_SET); // On d\xe9cale le curseur de 5.\r\n    printf("Position curseur apres decalage de 5 : %d \\n", ftell(fichier));\r\n    rewind(fichier);\r\n    printf("Position curseur apres rewind : %d \\n", ftell(fichier));\r\n\r\n    /** AUTRE **/\r\n    char ligne[256];\r\n    FILE *fichier_doublon = fopen("doublon.txt","a");\r\n    while(fgets(ligne, 256, fichier) != NULL){\r\n        printf("Ligne vaut : %s", ligne);\r\n        fputs(ligne,fichier_doublon);\r\n    }\r\n\r\n    fclose(fichier_doublon);\r\n    fclose(fichier);\r\n\r\n    rename("doublon.txt","autre.txt");\r\n    //remove("autre.txt"); // DANGER ! Attention, pas de r\xe9cup\xe9ration possible. \r\n\r\n    return 0;\r\n}\r\n\r\n// ----- D\xe9but Affichage console ----- //\r\nPosition curseur : 0\r\nPosition curseur apres decalage de 5 : 5\r\nPosition curseur apres rewind : 0\r\nLigne vaut : Hello World!\r\nLigne vaut : Comment vas-tu ?\r\n#Est cr\xe9\xe9 le fichier doublon.txt, dans lequel on copie l\'ensemble du contenu de texte.txt.\r\n#Puis on renomme doublon.txt en autre.txt.\r\n#Puis on supprime autre.txt.\r\n// ----- Fin Affichage console ----- //\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Nota bene :"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Id\xe9alement, on fait en sorte qu'une fonction en C retourne toujours quelque chose."})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Plut\xf4t que"})," ",(0,s.jsx)(n.code,{children:"void"}),(0,s.jsx)(n.em,{children:", on peut faire retourner un entier en indiquant"})," ",(0,s.jsx)(n.code,{children:"int"})," ",(0,s.jsx)(n.em,{children:"et"})," ",(0,s.jsx)(n.code,{children:"return 0"})," ",(0,s.jsx)(n.em,{children:"\xe0 la fin du programme, \xe0 la mani\xe8re du main."})]})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},856:(e,n,r)=>{r.d(n,{A:()=>i});const i=r.p+"assets/images/image-7286316364c8e8b1450d85657412aabd.png"},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>a});var i=r(6540);const s={},l=i.createContext(s);function t(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);